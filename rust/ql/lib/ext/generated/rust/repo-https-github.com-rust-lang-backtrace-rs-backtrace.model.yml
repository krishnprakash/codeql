# THIS FILE IS AN AUTO-GENERATED MODELS AS DATA FILE. DO NOT EDIT.
extensions:
  - addsTo:
      pack: codeql/rust-all
      extensible: summaryModel
    data:
      - ["repo:https://github.com/rust-lang/backtrace-rs:backtrace", "<crate::backtrace::Frame>::sp", "Argument[self].Field[as_if_std::the_backtrace_crate::backtrace::Frame::inner].Field[backtrace::backtrace::Frame::inner].Field[std::backtrace_rs::backtrace::Frame::inner].Field[as_if_std::the_backtrace_crate::backtrace::libunwind::Frame::Cloned::sp].Field[backtrace::backtrace::libunwind::Frame::Cloned::sp].Field[std::backtrace_rs::backtrace::libunwind::Frame::Cloned::sp]", "ReturnValue", "value", "dfc-generated"]
      - ["repo:https://github.com/rust-lang/backtrace-rs:backtrace", "<crate::backtrace::libunwind::Frame as crate::clone::Clone>::clone", "Argument[self].Reference.Field[as_if_std::the_backtrace_crate::backtrace::libunwind::Frame::Cloned::sp].Field[backtrace::backtrace::libunwind::Frame::Cloned::sp].Field[std::backtrace_rs::backtrace::libunwind::Frame::Cloned::sp]", "ReturnValue.Field[as_if_std::the_backtrace_crate::backtrace::libunwind::Frame::Cloned::sp].Field[backtrace::backtrace::libunwind::Frame::Cloned::sp].Field[std::backtrace_rs::backtrace::libunwind::Frame::Cloned::sp]", "value", "dfc-generated"]
      - ["repo:https://github.com/rust-lang/backtrace-rs:backtrace", "<crate::backtrace::libunwind::Frame>::sp", "Argument[self].Reference.Field[as_if_std::the_backtrace_crate::backtrace::libunwind::Frame::Cloned::sp].Field[backtrace::backtrace::libunwind::Frame::Cloned::sp].Field[std::backtrace_rs::backtrace::libunwind::Frame::Cloned::sp]", "ReturnValue", "value", "dfc-generated"]
      - ["repo:https://github.com/rust-lang/backtrace-rs:backtrace", "<crate::capture::Backtrace as crate::convert::From>::from", "Argument[0]", "ReturnValue.Field[as_if_std::the_backtrace_crate::capture::Backtrace::frames].Field[backtrace::capture::Backtrace::frames].Field[std::backtrace_rs::capture::Backtrace::frames]", "value", "dfc-generated"]
      - ["repo:https://github.com/rust-lang/backtrace-rs:backtrace", "<crate::capture::Backtrace as crate::convert::Into>::into", "Argument[self].Field[as_if_std::the_backtrace_crate::capture::Backtrace::frames].Field[backtrace::capture::Backtrace::frames].Field[std::backtrace_rs::capture::Backtrace::frames]", "ReturnValue", "value", "dfc-generated"]
      - ["repo:https://github.com/rust-lang/backtrace-rs:backtrace", "<crate::capture::BacktraceFrame as crate::convert::From>::from", "Argument[0]", "ReturnValue.Field[as_if_std::the_backtrace_crate::capture::BacktraceFrame::frame].Field[backtrace::capture::BacktraceFrame::frame].Field[std::backtrace_rs::capture::BacktraceFrame::frame].Field[as_if_std::the_backtrace_crate::capture::Frame::Raw(0)].Field[backtrace::capture::Frame::Raw(0)].Field[std::backtrace_rs::capture::Frame::Raw(0)]", "value", "dfc-generated"]
      - ["repo:https://github.com/rust-lang/backtrace-rs:backtrace", "<crate::capture::BacktraceFrame>::symbols", "Argument[self]", "ReturnValue", "taint", "df-generated"]
      - ["repo:https://github.com/rust-lang/backtrace-rs:backtrace", "<crate::capture::BacktraceSymbol>::colno", "Argument[self].Field[as_if_std::the_backtrace_crate::capture::BacktraceSymbol::colno].Field[backtrace::capture::BacktraceSymbol::colno].Field[std::backtrace_rs::capture::BacktraceSymbol::colno]", "ReturnValue", "value", "dfc-generated"]
      - ["repo:https://github.com/rust-lang/backtrace-rs:backtrace", "<crate::capture::BacktraceSymbol>::lineno", "Argument[self].Field[as_if_std::the_backtrace_crate::capture::BacktraceSymbol::lineno].Field[backtrace::capture::BacktraceSymbol::lineno].Field[std::backtrace_rs::capture::BacktraceSymbol::lineno]", "ReturnValue", "value", "dfc-generated"]
      - ["repo:https://github.com/rust-lang/backtrace-rs:backtrace", "<crate::capture::BacktraceSymbol>::name", "Argument[self]", "ReturnValue", "taint", "df-generated"]
      - ["repo:https://github.com/rust-lang/backtrace-rs:backtrace", "<crate::print::BacktraceFmt>::formatter", "Argument[self].Field[as_if_std::the_backtrace_crate::print::BacktraceFmt::fmt].Field[backtrace::print::BacktraceFmt::fmt].Field[std::backtrace_rs::print::BacktraceFmt::fmt]", "ReturnValue", "value", "dfc-generated"]
      - ["repo:https://github.com/rust-lang/backtrace-rs:backtrace", "<crate::print::BacktraceFmt>::frame", "Argument[self]", "ReturnValue.Field[as_if_std::the_backtrace_crate::print::BacktraceFrameFmt::fmt].Field[backtrace::print::BacktraceFrameFmt::fmt].Field[std::backtrace_rs::print::BacktraceFrameFmt::fmt]", "value", "dfc-generated"]
      - ["repo:https://github.com/rust-lang/backtrace-rs:backtrace", "<crate::print::BacktraceFmt>::new", "Argument[0]", "ReturnValue.Field[as_if_std::the_backtrace_crate::print::BacktraceFmt::fmt].Field[backtrace::print::BacktraceFmt::fmt].Field[std::backtrace_rs::print::BacktraceFmt::fmt]", "value", "dfc-generated"]
      - ["repo:https://github.com/rust-lang/backtrace-rs:backtrace", "<crate::print::BacktraceFmt>::new", "Argument[1]", "ReturnValue.Field[as_if_std::the_backtrace_crate::print::BacktraceFmt::format].Field[backtrace::print::BacktraceFmt::format].Field[std::backtrace_rs::print::BacktraceFmt::format]", "value", "dfc-generated"]
      - ["repo:https://github.com/rust-lang/backtrace-rs:backtrace", "<crate::print::BacktraceFmt>::new", "Argument[2]", "ReturnValue.Field[as_if_std::the_backtrace_crate::print::BacktraceFmt::print_path].Field[backtrace::print::BacktraceFmt::print_path].Field[std::backtrace_rs::print::BacktraceFmt::print_path]", "value", "dfc-generated"]
      - ["repo:https://github.com/rust-lang/backtrace-rs:backtrace", "<crate::symbolize::Symbol>::name", "Argument[self].Field[as_if_std::the_backtrace_crate::symbolize::Symbol::inner].Field[backtrace::symbolize::Symbol::inner].Field[std::backtrace_rs::symbolize::Symbol::inner].Field[as_if_std::the_backtrace_crate::symbolize::gimli::Symbol::Symtab::name].Field[backtrace::symbolize::gimli::Symbol::Symtab::name].Field[std::backtrace_rs::symbolize::gimli::Symbol::Symtab::name]", "ReturnValue.Field[core::option::Option::Some(0)].Field[as_if_std::the_backtrace_crate::symbolize::SymbolName::bytes].Field[backtrace::symbolize::SymbolName::bytes].Field[std::backtrace_rs::symbolize::SymbolName::bytes]", "value", "dfc-generated"]
      - ["repo:https://github.com/rust-lang/backtrace-rs:backtrace", "<crate::symbolize::SymbolName>::as_bytes", "Argument[self].Field[as_if_std::the_backtrace_crate::symbolize::SymbolName::bytes].Field[backtrace::symbolize::SymbolName::bytes].Field[std::backtrace_rs::symbolize::SymbolName::bytes]", "ReturnValue", "value", "dfc-generated"]
      - ["repo:https://github.com/rust-lang/backtrace-rs:backtrace", "<crate::symbolize::SymbolName>::new", "Argument[0]", "ReturnValue.Field[as_if_std::the_backtrace_crate::symbolize::SymbolName::bytes].Field[backtrace::symbolize::SymbolName::bytes].Field[std::backtrace_rs::symbolize::SymbolName::bytes]", "value", "dfc-generated"]
      - ["repo:https://github.com/rust-lang/backtrace-rs:backtrace", "<crate::symbolize::gimli::Symbol>::addr", "Argument[self].Field[as_if_std::the_backtrace_crate::symbolize::gimli::Symbol::Frame::addr].Field[backtrace::symbolize::gimli::Symbol::Frame::addr].Field[std::backtrace_rs::symbolize::gimli::Symbol::Frame::addr].Reference", "ReturnValue.Field[core::option::Option::Some(0)]", "value", "dfc-generated"]
      - ["repo:https://github.com/rust-lang/backtrace-rs:backtrace", "<crate::symbolize::gimli::Symbol>::name", "Argument[self].Field[as_if_std::the_backtrace_crate::symbolize::gimli::Symbol::Symtab::name].Field[backtrace::symbolize::gimli::Symbol::Symtab::name].Field[std::backtrace_rs::symbolize::gimli::Symbol::Symtab::name]", "ReturnValue.Field[core::option::Option::Some(0)].Field[as_if_std::the_backtrace_crate::symbolize::SymbolName::bytes].Field[backtrace::symbolize::SymbolName::bytes].Field[std::backtrace_rs::symbolize::SymbolName::bytes]", "value", "dfc-generated"]
      - ["repo:https://github.com/rust-lang/backtrace-rs:backtrace", "<crate::symbolize::gimli::elf::Object>::section", "Argument[0]", "ReturnValue", "taint", "df-generated"]
      - ["repo:https://github.com/rust-lang/backtrace-rs:backtrace", "<crate::symbolize::gimli::mmap::Mmap>::map", "Argument[1]", "ReturnValue.Field[core::option::Option::Some(0)].Field[as_if_std::the_backtrace_crate::symbolize::gimli::mmap::Mmap::len].Field[backtrace::symbolize::gimli::mmap::Mmap::len].Field[std::backtrace_rs::symbolize::gimli::mmap::Mmap::len]", "value", "dfc-generated"]
      - ["repo:https://github.com/rust-lang/backtrace-rs:backtrace", "<crate::symbolize::gimli::parse_running_mmaps::MapsEntry>::pathname", "Argument[self].Field[as_if_std::the_backtrace_crate::symbolize::gimli::parse_running_mmaps::MapsEntry::pathname].Field[backtrace::symbolize::gimli::parse_running_mmaps::MapsEntry::pathname].Field[std::backtrace_rs::symbolize::gimli::parse_running_mmaps::MapsEntry::pathname]", "ReturnValue.Reference", "value", "dfc-generated"]
      - ["repo:https://github.com/rust-lang/backtrace-rs:backtrace", "<crate::symbolize::gimli::stash::Stash>::allocate", "Argument[self]", "ReturnValue", "taint", "df-generated"]
      - ["repo:https://github.com/rust-lang/backtrace-rs:backtrace", "crate::symbolize::gimli::elf::handle_split_dwarf", "Argument[2].Field[addr2line::lookup::SplitDwarfLoad::path].Field[core::option::Option::Some(0)]", "ReturnValue.Reference", "value", "dfc-generated"]
  - addsTo:
      pack: codeql/rust-all
      extensible: sinkModel
    data:
      - ["repo:https://github.com/rust-lang/backtrace-rs:backtrace", "<crate::symbolize::gimli::Mapping>::new", "Argument[0]", "path-injection", "df-generated"]
  - addsTo:
      pack: codeql/rust-all
      extensible: sourceModel
    data:
      - ["repo:https://github.com/rust-lang/backtrace-rs:backtrace", "<crate::symbolize::gimli::Mapping>::new", "ReturnValue", "file", "df-generated"]
      - ["repo:https://github.com/rust-lang/backtrace-rs:backtrace", "crate::symbolize::gimli::parse_running_mmaps::parse_maps", "ReturnValue", "file", "df-generated"]
